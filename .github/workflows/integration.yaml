name: Integration Tests

# This workflow runs integration tests following industry standard practices:
# - On every pull request to main branch
# - On pushes to main branch
# - On a nightly schedule for comprehensive testing
# - Manually via workflow_dispatch for debugging
#
# The workflow uses a lightweight model (smollm2:135m) by default for speed,
# but can be configured to use larger models via manual dispatch.

on:
  # Run on all pull requests
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

  # Run on pushes to main branch
  push:
    branches: [main]
    paths:
      - 'pkg/**'
      - 'cmd/**'
      - 'integration/**'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/integration.yaml'

  # Nightly runs for comprehensive testing
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'

  # Manual trigger for debugging and custom model testing
  workflow_dispatch:
    inputs:
      model:
        description: 'Ollama model to use for testing'
        required: false
        default: 'qwen2.5:3b'
        type: choice
        options:
          - qwen2.5:3b
          - qwen2.5:1.5b
          - qwen2.5:0.5b
          - qwen3:latest
          - smollm2:135m
          - smollm2:360m
          - tinyllama:1.1b
      verbose:
        description: 'Enable verbose test output'
        required: false
        default: false
        type: boolean

jobs:
  integration:
    runs-on: ubuntu-latest
    services:
      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
        options: >-
          --health-cmd "ollama list"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 30s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x

      - name: Wait for Ollama to be Ready
        run: |
          echo "Waiting for Ollama to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
              echo "Ollama is ready after $i seconds"
              break
            fi
            echo "Attempt $i: Ollama not ready, waiting..."
            sleep 2
          done

          # Final check
          if ! curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
            echo "Ollama failed to start properly"
            exit 1
          fi

      - name: Determine Test Model
        id: model
        run: |
          # Use different models based on trigger type
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            # Use a more comprehensive model for nightly runs
            MODEL="qwen2.5:0.5b"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Use the user-specified model
            MODEL="${{ github.event.inputs.model || 'qwen2.5:3b' }}"
          else
            # Use qwen2.5:3b for PR/push tests - small (1.9GB), fast, and supports tool calling
            MODEL="qwen2.5:3b"
          fi
          echo "model=$MODEL" >> $GITHUB_OUTPUT
          echo "Selected model: $MODEL for event: ${{ github.event_name }}"

      - name: Pull Ollama Models (Main + Embedding)
        run: |
          MODEL="${{ steps.model.outputs.model }}"
          echo "Pulling model: $MODEL"

          # Pull the main model
          curl -X POST http://localhost:11434/api/pull \
            -H "Content-Type: application/json" \
            -d "{\"name\": \"$MODEL\"}" \
            --fail-with-body

          # Pull the embedding model for vector store tests
          # Using all-minilm for CI - smallest/fastest embedding model (22MB)
          echo "Pulling embedding model: all-minilm"
          curl -X POST http://localhost:11434/api/pull \
            -H "Content-Type: application/json" \
            -d "{\"name\": \"all-minilm\"}" \
            --fail-with-body

          # Verify models are loaded
          echo "Verifying models are available..."
          curl -s http://localhost:11434/api/tags | grep -q "$MODEL" || {
            echo "Model $MODEL not found in available models"
            curl -s http://localhost:11434/api/tags | jq .
            exit 1
          }

          curl -s http://localhost:11434/api/tags | grep -q "all-minilm" || {
            echo "Embedding model all-minilm not found in available models"
            curl -s http://localhost:11434/api/tags | jq .
            exit 1
          }

          echo "Models ready: $MODEL and all-minilm"

      - name: Run Integration Tests
        env:
          OLLAMA_HOST: http://localhost:11434
          OLLAMA_DEFAULT_MODEL: ${{ steps.model.outputs.model }}
          OLLAMA_EMBEDDING_MODEL: all-minilm
          OLLAMA_URL: http://localhost:11434
        run: |
          MODEL="${{ steps.model.outputs.model }}"
          echo "Running integration tests with OLLAMA_HOST=$OLLAMA_HOST"
          echo "Using model: $MODEL"
          echo "Event type: ${{ github.event_name }}"

          # Set verbose flag if requested
          VERBOSE_FLAG=""
          if [[ "${{ github.event.inputs.verbose }}" == "true" ]]; then
            VERBOSE_FLAG="-v"
            echo "Verbose mode enabled"
          fi

          # Run tests with appropriate timeout based on trigger
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            # Longer timeout for nightly runs
            TIMEOUT="10m"
          else
            TIMEOUT="5m"
          fi

          echo "Test timeout: $TIMEOUT"
          go test $VERBOSE_FLAG -count=1 -timeout=$TIMEOUT ./integration/...

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: |
            coverage/
            *.log
            integration/*.log

      - name: Generate Test Summary
        if: always()
        run: |
          echo "## Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Model:** ${{ steps.model.outputs.model }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ **Status:** All tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Tests failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Ollama Host: http://localhost:11434" >> $GITHUB_STEP_SUMMARY
          echo "- Test Timeout: ${{ github.event_name == 'schedule' && '10m' || '5m' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Verbose Output: ${{ github.event.inputs.verbose || 'false' }}" >> $GITHUB_STEP_SUMMARY
